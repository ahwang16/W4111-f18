README.txt

Alyssa Hwang
ahh2143

Databases HW1

OVERVIEW
The implementation for CSVTable and RDBTable are written in 
separate Python files:
CSVTable.py, RDBTable.py
I chose to make a Python class for each and model RDBTable off the sample
CSVTable implementation.

RUNNING THE FILES
You should be able to run the test files from the command line.
To test CSVTable: python3 testsV2.py
To test RDBTable: python3 __________

The RDBTable class takes a dictionary connect_info as one of the parameters
to make a MySQL connection.
connect_info = {
	'host':,
	'user':
	'db':,
	'password':
}
where db is the database name (in this case, Lahman2017).
The full constructor:
__init__(self, table_name, table_file, db_table_name, key_columns, connect_info)
table_name: logical name for the data table


I removed the load and save methods from RDBTable because the SQL server should
take care of loading and updating the tables.

PACKAGE IMPORTS
csv, copy, sys, os, json, pymysql.cursors, operator.

ERROR HANDLING
I check for invalid keys, duplicate inserts, invalid removals
(removing something that doesn't exist or violates the relational database
constraints), and empty values for find operations.

***

CSVTable.py
I used Professor Ferguson's Python template for this class.
- CSVTable takes three parameters: table_name, table_file, key_columns
	table_name (string) is the name of the data table (eg: "people")
	table_file (string) is the name of the data table in memory
	  (eg: "people.csv")
	key_columns (list) is a list of strings (column names/fields)
	  that make up the primary key (eg: ['playerID'])
- The CSVTable class assumes that the CSV tables are in a subdirectory "Data" in the current directory. This can be changed in the hardcoded rel_path variable.
- Along with the three parameters to the constructor, CSVTable has an instance variable called load_data. This is a list of ordered dicts (initialized as empty) that handles loads and saves.
- __str__(self)
	The str dunder allows the user to pretty print the table from load_data
	The user must load the data at least once to print the data table
- load(self)
	This method opens the CSV table (given in the constructor) and writes each row to the list loaded_data as an ordered dict
	The fieldnames and columns are preserved
	The user should call load immediately after initializing a CSVTable:
		csvt = CSVTable('people', 'people.csv', ['playerID'])
		csvt.load()
	Users who make changes to the data (by inserting or deleting entries) should call save() before loading data again to avoid losing information
	The load method raises an error if the primary key is not part of the columns in the CSV to be loaded
- find_by_primary_key(self, string, fields)
	string (list): a list of ordered values that should match the preset primary_key. This class assumes that the elements in this string list correspond in order to the fields listed in key_columns
	fields (list): the columns that should be returned. If None, return all columns.
	This method calls find_by_template to find entries that match the primary key
	It raises an error if any element in string is None or empty
- find_by_template(self, t, fields=None)
	t (dictionary): a dictionary of keys and values that the rows must match
	fields (list, default None): a list of columns to include in the responses. If None, return all
	This method returns all rows that match a template t
	It raises an error if a key that is not in the CSV is searched
- save(self)
	Writes the ordered dicts in loaded_data back to the original CSV file
- insert(self, r)
	r (dictionary): key-value pairs	to be inserted into the CSV
	This method inserts a new row into the table
	This method does not save the new row in storage--the user must call save() to have a fully updated CSV
	This method raises an error if the primary key is not present, an invalid key is used, or the user tries to insert a duplicate primary key
- delete(self, t)
	t (dictionary): key-value pairs representing the row to be removed from the data table
	This method calls find_by_template() to find the row to be removed.
	If the row is not present, the method raises an error.
	This method removes all rows that match the template

RDBTable.py
This is the Python implementation for a MySQL relational database. I modeled it on the CSVTable class.
- RDBTable takes four parameters: table_file, db_table_name, key_columns, connect_info
	table_file (string): the name of the table in the database (eg: "people")
	db_table_name (string): the name of the SQL database (in this case, "lahman2017")
	key_columns (list of strings): the fields that make up the primary key
	connect_info (dictionary): information necessary for connecting to the SQL server
		connect_info = {
			'host':,
			'user':
			'db':,
			'password':
		}
- This class assumes that the necessary tables are already uploaded to the SQL server and the the server is on. The user should have an account that can connect to the server.
- Along with the four parameters, RDBTable has an instance variable, self.cnx, that makes the connection to the server via PyMySQL
- run_q(self, q, fetch=False)
	q (string): the query string to run
	fetch (Boolean): True if we need to return an item from the database
	This is a helper method to run SQL queries. This was taken from Professor Ferguson's Piazza notes.
	https://piazza.com/class/jkb0pv2a65m35?cid=240
- get_column_names(self)
	Return the column names from the data table
	Taken from Professor Ferguson's Piazza notes: https://piazza.com/class/jkb0pv2a65m35?cid=240
- get_no_of_rows(self)
	Get number of rows in the data table
	Taken from Professor Ferguson's Piazza notes
	https://piazza.com/class/jkb0pv2a65m35?cid=240
- get_key_columns(self)
	Get key columns from data table
	Taken from Professor Ferguson's Piazza notes
	https://piazza.com/class/jkb0pv2a65m35?cid=240
- __str__(self)
	A method to pretty print the RDBTable
	Provides minimal implementation for derived tables
	Calls run_q(), get_column_names(), get_no_of_rows(), get_key_columns() as helper methods
	Taken from Professor Ferguson's Piazza notes
	https://piazza.com/class/jkb0pv2a65m35?cid=240
- template_to_where(self, t)
	t (dictionary): converts a template to a WHERE/AND SQL query
	Taken from Professor Ferguson's class notes 
	https://github.com/donald-f-ferguson/W4111-f18/blob/master/Notebooks/w4111-L1-f2018-Introduction.ipynb- find_by_primary_key(self, values, fields)
	values (list of strings): values, in order, that should match the key_columns
	fields (list of strings): columns to return
	Call find_by_template() to find the appropriate row
- find_by_template(self, t, fields)
	t (dictionary): key-value pairs that represent the row(s) that should be returned
	fields (list of strings): fields to be returned
	Raise an error if an invalid search is attempted
	Taken from Professor Ferguson's class notes
	https://github.com/donald-f-ferguson/W4111-f18/blob/master/Notebooks/w4111-L1-f2018-Introduction.ipynb
- insert(self, r)
	r (dictionary): key-value pairs that represent a row to be inserted
	Convert the keys and values in r to a SQL query
	Raise error for invalid insert (eg: adding a batting record for a nonexistent player)
- delete(self, t)
	t (dictionary): key-value pairs representing template of rows to be removed
	Convert keys and values to a SQL query
	Raise error for an invalid delete (eg: removing player when the player still has a batting record)
	Return nothing if the requested template does not exist
- ten_greatest_hitters(self)
	I chose to include this as a method so that I could call it after making an instance of an RDBTable
	Code taken from Professor Ferguson https://github.com/donald-f-ferguson/W4111-f18/blob/master/Notebooks/w4111-L1-f2018-Introduction.ipynb
	Screenshot included

ten_greatest_hitters.csv.py
	This file finds and prints the top ten hitters by taking the highest batting averages: at bats divided by total hits.
	I chose to do it like this because each instance of a CSVTable can only access one CSV at a time, whereas an RDBTable can access any in the database.
	First, I iterate through all batting records from 1960 until 2018, inclusive, and add them to a dictionary. If a player has more than one batting record, their new at bat and total hits numbers are summed and the new average is calculated.
	Then I iterate through all of these batting records and keep only the entries for which players have at bat > 200.
	Then I iterate through those players to find their first and last names and take the top 10 averages.
	Screenshot included

ten_greatest_hitters_rdb.py
	This file finds and prints the top ten hitters by creating an instance of an RDBTable and using Professor Ferguson's code.
	Users who wish to try this program should input their own username and password.

csvtest.py
	Test file for the CSVTable class.
	I chose to write straight code to save my own time, although some clearly defined tests may be more useful in the future.
	I test for successful and illegal inserts and deletes. I also use the both search methods. I commented out a line that would print the entire table to save room in the terminal, but it can be easily uncommented and run.
	Screen shot included

rdbtest.py
	Test file for the RDBTable class
	Again, I chose to write straight code to save time.
	I test for the same types of errors and successes as the csvtest file.
	I also test for illegal inserts/deletes to the battignsmall table (I used battingsmall because it is a smaller data table and prevents lock time errors). It should return an error if a batting record for a nonexistent player is inserted or a player that has a batting record is deleted.
	I also test both search methods.
	Screen shot included

testsV2.py
	Professor Ferguson's test file. I do not include a screenshot for this file but it does run with the expected outputs, barring a few printing inconsistencies (my ordered dicts do pretty print as well as his).
	